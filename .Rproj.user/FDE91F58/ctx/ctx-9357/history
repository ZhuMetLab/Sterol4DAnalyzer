}
hilic <- MakeRefRT(read.csv("RT HILIC calibration table .csv", stringsAsFactors = FALSE))
libfile <- system.file("rtref", rtdirRef, libname, package = getPackageName())
function (description = "", open = "", blocking = TRUE, encoding = getOption("encoding"),
raw = FALSE, method = getOption("url.method", "default"))
0
MakeRefRT <- function(rtTbl) {
colnames(rtTbl) <- c("name", "rt")
rtTbl <- rbind(data.frame("name" = "Start", "rt" = 0),
rtTbl,
data.frame("name" = "End", "rt" = 1080))
return(rtTbl)
}
hilic <- MakeRefRT(read.csv("RT HILIC calibration table .csv", stringsAsFactors = FALSE))
setwd("~/Work/Data/LipidAnalyzer2/LipidLibrary/RTCalibrationTableRef/")
fn <- list.files()
hilic <- MakeRefRT(read.csv("RT HILIC calibration table .csv", stringsAsFactors = FALSE))
rp1 <- MakeRefRT(read.csv("RT1 reverse column calibration table .csv", stringsAsFactors = FALSE))
rp2 <- MakeRefRT(read.csv("RT2 reverse column calibration table .csv", stringsAsFactors = FALSE))
saveRDS(hilic, file = file.path("~/Work/GIT_DEV/LipidAnalyzer2/LipidAnalyzer2/inst/rtref/",
"rt1/HILIC"),
version = 2)
saveRDS(hilic, file = file.path("~/Work/GIT_DEV/LipidAnalyzer2/LipidAnalyzer2/inst/rtref/",
"rt2/HILIC"),
version = 2)
saveRDS(rp2, file = file.path("~/Work/GIT_DEV/LipidAnalyzer2/LipidAnalyzer2/inst/rtref/",
"rt2/RP"),
version = 2)
saveRDS(rp1, file = file.path("~/Work/GIT_DEV/LipidAnalyzer2/LipidAnalyzer2/inst/rtref/",
"rt1/RP"),
version = 2)
wd <- "~/Work/Data/LipidAnalyzer2/Demo6560"
setwd(wd)
require(MSProcess)
require(SpectraTools)
devtools::load_all("~/Work/GIT_DEV/LipidAnalyzer2/LipidAnalyzer2")
LoadParam(wd = wd,
paramset = "Agilent6560_negative_mgf")
LipidAnalyzer(filePeaks = "PlasmaNeg_MS1_table.csv",
spectraType = "mgf",
libname = "4D_6560_RT1_LipidMapsTool267k",
rulename = "4D_6560",
experimentParam = experimentParam,
detectPeaksParam = detectPeaksParam,
annotationParam = annotationParam,
assignMSMSParam = assignMSMSParam,
searchParam = searchParam,
matchParam = matchParam,
combineParam = combineParam)
libfile
library(LipidAnalyzer2)
remove.packages("LipidAnalyzer2", lib="~/Library/R/3.6/library")
library(Lipid4DAnalyzer)
devtools::load_all(".")
######################################
## MGF
######################################
wd <- "~/Work/Data/LipidAnalyzer2/Demo6560"
setwd(wd)
require(MSProcess)
require(SpectraTools)
devtools::load_all("~/Work/GIT_DEV/LipidAnalyzer2/LipidAnalyzer2")
LoadParam(wd = wd,
paramset = "Agilent6560_negative_raw")
devtools::load_all("~/Work/GIT_DEV/Lipid4DAnalyzer/Lipid4DAnalyzer")
LoadParam(wd = wd,
paramset = "Agilent6560_negative_raw")
devtools::load_all("~/Work/GIT_DEV/Lipid4DAnalyzer/Lipid4DAnalyzer")
LipidAnalyzer(filePeaks = "PlasmaNeg_MS1_table.csv",
spectraType = "mgf",
libname = "4D_6560_RT1_LipidMapsTool267k",
rulename = "4D_6560",
experimentParam = experimentParam,
detectPeaksParam = detectPeaksParam,
annotationParam = annotationParam,
assignMSMSParam = assignMSMSParam,
searchParam = searchParam,
matchParam = matchParam,
combineParam = combineParam)
View(experimentParam)
pi
x <- seq(-1, 1, by = 0.05)
1/(sigma * sqrt(2 * pi)) * exp(-(x - mu)^2/(2*sigma^2))
Gaussian <- function(sigma, mu) {
x <- seq(-1, 1, by = 0.05)
1/(sigma * sqrt(2 * pi)) * exp(-(x - mu)^2/(2*sigma^2))
}
Gaussian(2, 0)
plot(Gaussian(2, 0))
plot(Gaussian(1, 0))
Gaussian <- function(sigma, mu) {
x <- seq(-2, 2, by = 0.05)
1/(sigma * sqrt(2 * pi)) * exp(-(x - mu)^2/(2*sigma^2))
}
plot(Gaussian(1, 0))
Gaussian <- function(sigma, mu) {
x <- seq(-3, 3, by = 0.5)
1/(sigma * sqrt(2 * pi)) * exp(-(x - mu)^2/(2*sigma^2))
}
plot(Gaussian(1, 0))
a <- Gaussian(1, 0)
b <- Gaussian(1, 0) * 2
plot(a)
points(b)
plot(a, type = "b", col = "r")
plot(a, type = "b", col = "red")
points(b, type = "b", col = "blue")
plot(b, type = "b", col = "blue")
points(a, type = "b", col = "red")
cor(a,b)
c <- Gaussian(2, 0)
points(c, type = "b", col = "green")
cor(a, c)
Gaussian <- function(sigma, mu) {
x <- seq(-3, 3, by = 0.5)
exp(-(x - mu)^2/(2*sigma^2))
}
plot(Gaussian(1, 0))
a <- Gaussian(1, 0)
b <- Gaussian(1, 0) * 2
c <- Gaussian(2, 0)
plot(b, type = "b", col = "blue")
points(a, type = "b", col = "red")
points(c, type = "b", col = "green")
c <- Gaussian(2, 0)/2
points(c, type = "b", col = "green")
c <- Gaussian(2, 0)/3
points(c, type = "b", col = "green")
c <- Gaussian(1.4, 0)/3
points(c, type = "b", col = "green")
plot(b, type = "b", col = "blue")
points(a, type = "b", col = "red")
points(c, type = "b", col = "green")
cor(a,b)
cor(a, c)
cor(b, c)
devtools::load_all(".")
load("~/Work/GIT/LipidAnalyzer/LipidAnalyzer/inst/lib/LibLipids.RData")
load("~/Work/dev/devbak/GIT/LipidAnalyzer/LipidAnalyzer/inst/lib/LibLipids.RData")
info <- lib.lip$meta$neg
info
infoNeg <- TransformInfo(lib.lip$meta$neg)
infoNeg$polarity <- "negative"
specNeg <- lapply(lib.lip$compound$neg, `[[`, "spec")
names(specNeg) <- NULL
info <- lib.lip$meta$neg
infoNeg <- TransformInfo(lib.lip$meta$neg)
info
unique()
unique(info$adduct)
adduct <- paste0("[", gsub("\\w*\\+", "M+", info$adduct), "]")
adduct
unique(adduct)
adduct <- paste0("[", gsub("\\w+\\+", "M+", info$adduct), "]")
adduct
gsub("\\w+\\+", "M+", info$adduct)
adduct <- paste0("[", gsub("\\w+\\+|-", "M+", info$adduct), "]")
adduct
info$adduct
unique(info$adduct)
unique(info$adduct) -> x
gsub("\\w+\\+|-", "", x)
classname <- gsub("(\\+|-)+\\w+", "", info$adduct)
classname
unique(classname)
unique(info$adduct)
gsub("\\w+(?=+|-)", "", x)
gsub("\\w+(?=\\+|-)", "", x)
gsub("\\w+(?=\\+|-)", "", x, perl = TRUE)
gsub("\\w+(?=\\+|-)", "[M", x, perl = TRUE)
paste0(gsub("\\w+(?=\\+|-)", "[M", x, perl = TRUE), "]\")
paste0(gsub("\\w+(?=\\+|-)", "[M", x, perl = TRUE), "]")
x
classname <- gsub("(\\+|-)+\\w+", "", info$adduct)
TransformInfo <- function(info) {
adduct <- paste0(gsub("\\w+(?=\\+|-)", "[M", x, perl = TRUE), "]")
classname <- gsub("(\\+|-)+\\w+", "", info$adduct)
info$adduct <- adduct
info$clasname <- classname
info
}
infoNeg <- TransformInfo(lib.lip$meta$neg)
info <- lib.lip$meta$neg
infoNeg <- TransformInfo(lib.lip$meta$neg)
lib.lip$meta$neg
TransformInfo <- function(info) {
adduct <- paste0(gsub("\\w+(?=\\+|-)", "[M", info$adduct, perl = TRUE), "]")
classname <- gsub("(\\+|-)+\\w+", "", info$adduct)
info$adduct <- adduct
info$clasname <- classname
info
}
infoNeg <- TransformInfo(lib.lip$meta$neg)
infoNeg$adduct
unique(infoNeg$adduct)
specNeg <- lapply(lib.lip$compound$neg, `[[`, "spec")
names(specNeg) <- NULL
infoPos <- TransformInfo(lib.lip$meta$pos)
infoPos$polarity <- "positive"
info <- rbind(infoPos, infoNeg)
specPOS <- lapply(lib.lip$compound$pos, `[[`, "spec")
names(specPos) <- NULL
infoPos <- TransformInfo(lib.lip$meta$pos)
infoPos$polarity <- "positive"
info <- rbind(infoPos, infoNeg)
infoPos
lib.lip$meta$pos
lib.lip$meta$pos$adduct
unique(lib.lip$meta$pos$adduct)
adduct <- paste0(gsub(".*(?=\\+|-)", "[M", info$adduct, perl = TRUE), "]")
adduct
TransformInfo <- function(info) {
adduct <- paste0(gsub(".*(?=\\+|-)", "[M", info$adduct, perl = TRUE), "]")
classname <- gsub("(\\+|-)+\\w+", "", info$adduct)
info$adduct <- adduct
info$clasname <- classname
info
}
info <- lib.lip$meta$neg
infoNeg <- TransformInfo(lib.lip$meta$neg)
infoNeg$polarity <- "negative"
specNeg <- lapply(lib.lip$compound$neg, `[[`, "spec")
names(specNeg) <- NULL
infoPos <- TransformInfo(lib.lip$meta$pos)
infoPos$polarity <- "positive"
info <- rbind(infoPos, infoNeg)
specPOS <- lapply(lib.lip$compound$pos, `[[`, "spec")
names(specPos) <- NULL
names(specPOS) <- NULL
specPOS
rownames(info) <- NULL
specdata <- SpectraTools::SpectraData(info = info, spectra = c(specNeg, specPOS))
specdata@info
specdata@spectra
adduct(specdata@info$adduct)
unique(specdata@info$adduct)
unique(specdata@info$clasname)
saveRDS(specdata,
file = file.path("~/Work/GIT_DEV/LipidAnalyzer2/LipidAnalyzer2/inst/lib/",
"2D_6600_RT1_LipidAnalyzer76k"),
version = 2)
saveRDS(specdata,
file = file.path("~/Work/dev/Lipid4DAnalyzer/Lipid4DAnalyzer/inst/lib/",
"2D_6600_RT1_LipidAnalyzer76k"),
version = 2)
options(error=recover)
LipidAnalyzer(spectraType = "raw", libname = "2D_6600_RT1_LipidAnalyzer76k",
applyRules = F,
experimentParam = experimentParam,
detectPeaksParam = detectPeaksParam,
annotationParam = annotationParam,
assignMSMSParam = assignMSMSParam,
searchParam = searchParam,
matchParam = matchParam,
combineParam = combineParam)
rm(list=ls())
devtools::load_all(".")
wd <- "/Users/yinyd/Work/data/Lipid4DAnalyzer/pos"
setwd(wd)
require(MSProcess)
require(SpectraTools)
devtools::load_all("~/Work/dev/Lipid4DAnalyzer/Lipid4DAnalyzer")
LoadParam(paramset = "2D_6600_positive")
LipidAnalyzer(spectraType = "raw", libname = "2D_6600_RT1_LipidAnalyzer76k",
applyRules = F,
experimentParam = experimentParam,
detectPeaksParam = detectPeaksParam,
annotationParam = annotationParam,
assignMSMSParam = assignMSMSParam,
searchParam = searchParam,
matchParam = matchParam,
combineParam = combineParam)
detectPeaksParam@plotGroupEIC <- FALSE
LipidAnalyzer(spectraType = "raw", libname = "2D_6600_RT1_LipidAnalyzer76k",
applyRules = F,
experimentParam = experimentParam,
detectPeaksParam = detectPeaksParam,
annotationParam = annotationParam,
assignMSMSParam = assignMSMSParam,
searchParam = searchParam,
matchParam = matchParam,
combineParam = combineParam)
libdata
dataRef@info
mzRef
rownames(infoExp)
xx <- lapply(rownames(infoExp), function(nmExp) {
cat(nmExp, "\t")
drExp <- infoExp[nmExp, ]
mzrange <- .GetPpmRange(drExp$mz, ppm = searchParam@ppm,
resDefineAt = searchParam@resDefineAt)
idxmatch <- which(mzRef$mz >= mzrange[1] & mzRef$mz <= mzrange[2])
if (length(idxmatch) == 0) {
return(NA)
}
nmRef <- mzRef$specname[idxmatch]
infomatch <- infoRef[nmRef, , drop = FALSE]
infomatch$adduct <- mzRef[idxmatch, "adduct"]
mzError <- .GetPpmDiff(drExp$mz, infomatch$mz, resDefineAt = searchParam@resDefineAt)
infomatch$errorMZ <- mzError
if (searchParam@scoreRT) {
if (!is.null(rtcalExp)) {
dataRef@info <- .CalibrateRT(refInfo = dataRef@info,
rtcalRef = rtcalRef,
rtcalExp = rtcalExp)
} else {
warning("RT calibration will be ignored as the RT calibration table is not provided.")
}
rtExp <- drExp$rt
rtRef <- infomatch$rt
# rtError <- rtExp - rtRef
score <- .TrapezoidalScore(rtExp, rtRef, searchParam@toleranceRT)
isKeep <- score > 0
if (all(!isKeep)) {
return(NA)
}
infomatch <- infomatch[isKeep, , drop = FALSE]
infomatch$errorRT <- attributes(score)$delta[isKeep]
infomatch$scoreRT <- score[isKeep]
}
if (searchParam@scoreCCS) {
ccsExp <- drExp$ccs
ccsRef <- infomatch$ccs
score <- .TrapezoidalScore(ccsExp, ccsRef, searchParam@toleranceCCS,
type = searchParam@typeCCS)
isKeep <- score > 0
if (all(!isKeep)) {
return(NA)
}
infomatch <- infomatch[isKeep, , drop = FALSE]
infomatch$errorCCS <- attributes(score)$delta[isKeep]
infomatch$scoreCCS <- score[isKeep]
}
dExp <- SpectraData(info = drExp,
spectra = dataExp@spectra[nmExp])
dRef <- SpectraData(info = infomatch,
spectra = dataRef@spectra[rownames(infomatch)])
return(list("dataExp" = dExp,
"dataRef" = dRef))
})
nmExp <- rownames(infoExp)[1]
nmExp
drExp <- infoExp[nmExp, ]
drExp
mzrange <- .GetPpmRange(drExp$mz, ppm = searchParam@ppm,
resDefineAt = searchParam@resDefineAt)
drExp$mz
searchParam@ppm
infoExp
infoExp <- .Col2Numeric(infoExp)
drExp <- infoExp[nmExp, ]
drExp
drExp$mz
mzrange <- .GetPpmRange(drExp$mz, ppm = searchParam@ppm,
resDefineAt = searchParam@resDefineAt)
mzrange
searchParam@ppm
searchParam@resDefineAt
drExp$mz
dataRef@info
class(infoExp$mz)
infoExp
class(infoExp)
class(infoExp$name)
class(infoExp$mz)
drExp <- infoExp[nmExp, ]
drExp
class(drExp)
infoExp$mz
class(infoExp$mz)
infoExp <- dataExp@info[names(dataExp@spectra), , drop = FALSE]
infoExp$mz
infoRef <- dataRef@info[names(dataRef@spectra), , drop = FALSE]
infoRef$mz
expdata@info
expdata@info$mz
devtools::load_all("~/Work/dev/Lipid4DAnalyzer/Lipid4DAnalyzer")
wd <- "/Users/yinyd/Work/data/Lipid4DAnalyzer/pos"
setwd(wd)
require(MSProcess)
require(SpectraTools)
devtools::load_all("~/Work/dev/Lipid4DAnalyzer/Lipid4DAnalyzer")
detectPeaksParam@plotGroupEIC <- FALSE
LoadParam(paramset = "2D_6600_positive")
detectPeaksParam@plotGroupEIC <- FALSE
LipidAnalyzer(spectraType = "raw", libname = "2D_6600_RT1_LipidAnalyzer76k",
applyRules = F,
experimentParam = experimentParam,
detectPeaksParam = detectPeaksParam,
annotationParam = annotationParam,
assignMSMSParam = assignMSMSParam,
searchParam = searchParam,
matchParam = matchParam,
combineParam = combineParam)
options(error=recover)
LipidAnalyzer(spectraType = "raw", libname = "2D_6600_RT1_LipidAnalyzer76k",
applyRules = F,
experimentParam = experimentParam,
detectPeaksParam = detectPeaksParam,
annotationParam = annotationParam,
assignMSMSParam = assignMSMSParam,
searchParam = searchParam,
matchParam = matchParam,
combineParam = combineParam)
x
X
res
devtools::load_all(".")
setwd("javascript:;")
setwd("~/Work/dev/Lipid4DAnalyzer/Lipid4DAnalyzer/inst/lib")
ls()
dir()
libdata <- readRDS("2D_6600_RT1_LipidAnalyzer76k")
saveRDS(libdata, file = "2D_6600_RT1_LipidAnalyzer76k", version = 2)
setwd("~/Work/dev/Lipid4DAnalyzer/Lipid4DAnalyzer/inst/paramsets")
dir()
x <- readRDS("2D_6600_negative")
x
class(x)
saveRDS(x, file = "2D_6600_negative", version = 2)
x <- readRDS("2D_6600_positive")
saveRDS(x, file = "2D_6600_positive", version = 2)
library(Lipid4DAnalyzer)
install.packages("~/Work/dev/MSProcess/MSProcess_0.1.0.tar.gz", repos = NULL, type = "source")
load("~/Work/dev/devbak/GIT/LipidAnalyzer/LipidAnalyzer/inst/lib/LibLipids.RData")
info <- lib.lip$meta$neg
info
infoNeg <- TransformInfo(lib.lip$meta$neg)
infoNeg
TransformInfo <- function(info) {
adduct <- paste0(gsub(".*(?=\\+|-)", "[M", info$adduct, perl = TRUE), "]")
classname <- gsub("(\\+|-)+\\w+", "", info$adduct)
info$adduct <- adduct
info$clasname <- classname
info
}
load("~/Work/dev/devbak/GIT/LipidAnalyzer/LipidAnalyzer/inst/lib/LibLipids.RData")
info <- lib.lip$meta$neg
infoNeg <- TransformInfo(lib.lip$meta$neg)
infoNeg$polarity <- "negative"
specNeg <- lapply(lib.lip$compound$neg, `[[`, "spec")
specNeg
names(specNeg) <- NULL
infoPos <- TransformInfo(lib.lip$meta$pos)
infoPos
View(infoPos)
infoPos$polarity <- "positive"
info <- rbind(infoPos, infoNeg)
info <- rbind(infoPos, infoNeg)
specPOS <- lapply(lib.lip$compound$pos, `[[`, "spec")
names(specPOS) <- NULL
rownames(info) <- NULL
specdata <- SpectraTools::SpectraData(info = info, spectra = c(specPOS, specNEG))
load("~/Work/dev/devbak/GIT/LipidAnalyzer/LipidAnalyzer/inst/lib/LibLipids.RData")
info <- lib.lip$meta$neg
infoNeg <- TransformInfo(lib.lip$meta$neg)
infoNeg$polarity <- "negative"
specNeg <- lapply(lib.lip$compound$neg, `[[`, "spec")
names(specNeg) <- NULL
infoPos <- TransformInfo(lib.lip$meta$pos)
infoPos$polarity <- "positive"
info <- rbind(infoPos, infoNeg)
specPOS <- lapply(lib.lip$compound$pos, `[[`, "spec")
names(specPOS) <- NULL
rownames(info) <- NULL
load("~/Work/dev/devbak/GIT/LipidAnalyzer/LipidAnalyzer/inst/lib/LibLipids.RData")
info <- lib.lip$meta$neg
infoNeg <- TransformInfo(lib.lip$meta$neg)
infoNeg$polarity <- "negative"
specNEG <- lapply(lib.lip$compound$neg, `[[`, "spec")
names(specNEG) <- NULL
infoPos <- TransformInfo(lib.lip$meta$pos)
infoPos$polarity <- "positive"
info <- rbind(infoPos, infoNeg)
specPOS <- lapply(lib.lip$compound$pos, `[[`, "spec")
names(specPOS) <- NULL
rownames(info) <- NULL
specdata <- SpectraTools::SpectraData(info = info, spectra = c(specPOS, specNEG))
saveRDS(specdata,
file = file.path("~/Work/dev/Lipid4DAnalyzer/Lipid4DAnalyzer/inst/lib/",
"2D_6600_RT1_LipidAnalyzer76k"),
version = 2)
library(Lipid4DAnalyzer)
load("~/Work/dev/devbak/GIT/LipidAnalyzer/LipidAnalyzer/inst/lib/LibLipids.RData")
info <- lib.lip$meta$neg
infoNeg <- TransformInfo(lib.lip$meta$neg)
infoNeg$polarity <- "negative"
specNEG <- lapply(lib.lip$compound$neg, `[[`, "spec")
TransformInfo <- function(info) {
adduct <- paste0(gsub(".*(?=\\+|-)", "[M", info$adduct, perl = TRUE), "]")
classname <- gsub("(\\+|-)+\\w+", "", info$adduct)
info$adduct <- adduct
info$classname <- classname
info
}
load("~/Work/dev/devbak/GIT/LipidAnalyzer/LipidAnalyzer/inst/lib/LibLipids.RData")
info <- lib.lip$meta$neg
infoNeg <- TransformInfo(lib.lip$meta$neg)
infoNeg$polarity <- "negative"
specNEG <- lapply(lib.lip$compound$neg, `[[`, "spec")
names(specNEG) <- NULL
infoPos <- TransformInfo(lib.lip$meta$pos)
infoPos$polarity <- "positive"
info <- rbind(infoPos, infoNeg)
specPOS <- lapply(lib.lip$compound$pos, `[[`, "spec")
names(specPOS) <- NULL
rownames(info) <- NULL
specdata <- SpectraTools::SpectraData(info = info, spectra = c(specPOS, specNEG))
saveRDS(specdata,
file = file.path("~/Work/dev/Lipid4DAnalyzer/Lipid4DAnalyzer/inst/lib/",
"2D_6600_RT1_LipidAnalyzer76k"),
version = 2)
