LipidAnalyzer <- function(filePeaks = NULL,
                          spectraType = c("raw", "mgf", "msp", "cef"),
                          libname = c("3D_6600_RT1_LipidMapsTool271k",
                                      "3D_6600_RT2_LipidMapsTool271k",
                                      "4D_6560_RT1_LipidMapsTool267k",
                                      "4D_6560_RT2_LipidMapsTool267k",
                                      "2D_6600_RT1_LipidAnalyzer76k"),
                          libdata = NULL,
                          fileRtCalibrate = NULL,
                          applyRules = TRUE,
                          rulename = c("3D_6600", "4D_6560"),
                          experimentParam = NULL,
                          detectPeaksParam = NULL,
                          assignMSMSParam = NULL,
                          annotationParam = NULL,
                          searchParam = NULL,
                          matchParam = NULL,
                          combineParam = NULL) {

  wd0 <- getwd()
  setwd(experimentParam@wd)
  libname <- match.arg(libname)
  spectraType <- match.arg(spectraType)

  params <- list("experimentParam" = experimentParam,
                 "detectPeaksParam" = detectPeaksParam,
                 "annotationParam" = annotationParam,
                 "assignMSMSParam" = assignMSMSParam,
                 # "parseParam" = parseParam,
                 "combineParam" = combineParam,
                 "searchParam" = searchParam,
                 "matchParam" = matchParam)
  save(params, file = file.path(experimentParam@resDir, "params.Rda"), version = 2)
  write.csv(GetParamTable(params),
            file.path(experimentParam@resDir, "params.csv"),
            row.names = FALSE)

  if (missing(libdata)) {
    libfile <- system.file("lib", libname, package = getPackageName())
    libdata <- readRDS(libfile)
    libdata <- SpectraTools::FindSpectra(libdata,
                                         findby = "polarity",
                                         values = experimentParam@polarity)
    libdata@info$rt <- switch(experimentParam@lc,
                              "RP" = libdata@info$rt.rp,
                              "HILIC" = libdata@info$rt.hilic)
  }

  rtcalExp <- rtcalRef <- NULL
  if (!is.null(fileRtCalibrate)) {
    rtcalExp <- read.csv(fileRtCalibrate, stringsAsFactors = FALSE)
    if (assignMSMSParam@rtUnitMS1 == "m") {
      rtcalExp$rt <- round(rtcalExp$rt * 60, 0)
    }
    rtdirRef <- ifelse(grepl("RT1", libname), "rt1", "rt2")
    rtfile <- system.file("rtref", rtdirRef, experimentParam@lc, package = getPackageName())
    rtcalRef <- readRDS(rtfile)
  }

  if (!is.null(filePeaks)) {
    metInfo <- read.csv(filePeaks, stringsAsFactors = FALSE)
    filesSpec = list.files(experimentParam@wd,
                           pattern = paste0("(?i)\\.", spectraType, "$"),
                           recursive = TRUE,
                           full.names = TRUE)
    expdata <- AssignMSMS(assignMSMSParam, metInfo, experimentParam,
                          files = filesSpec)
    # saveRDS(metInfo, file = file.path(experimentParam@tmpDir, "metInfo.rdata"))
  } else if (!is.null(detectPeaksParam)) {
    metInfo <- DetectPeaks(experimentParam, detectPeaksParam)
    expdata <- AssignMSMS(assignMSMSParam, metInfo)
    saveRDS(metInfo, file = file.path(experimentParam@tmpDir, "metInfo.rdata"))
  }else {
    stop("Please provide detectPeaksParam or filePeaks!")
  }
  specSearched <- SearchSpectra(expdata, libdata, searchParam,
                                rtcalExp = rtcalExp, rtcalRef = rtcalRef)

  expinfo <- expdata@info

  scoreMatch <- BiocParallel::bplapply(specSearched, function(specData) {
    dataExp <- specData$dataExp
    dataRef <- specData$dataRef
    SpectraTools::MatchSpectra(dataExp, dataRef, matchParam)
  })

  scoreMatch <- scoreMatch[!sapply(scoreMatch, is.null)]

  dirPlot <- file.path(experimentParam@resDir, "MSMSMatchPlot")
  PlotMatchResult(scoreMatch, expdata@info, dirPlot, addname = FALSE)

  scTable <- do.call(rbind, lapply(scoreMatch, GenOutputScore, matchParam@cutoff))
  pkTable <- merge(expdata@info, scTable, by = 'row.names', all = TRUE)
  rownames(pkTable) <- pkTable$Row.names
  pkTable <- pkTable[, -1]
  write.csv(pkTable, file.path(experimentParam@resDir, "result_MSMSmatch.csv"),
            row.names = FALSE)

  if (libname == "2D_6600_RT1_LipidAnalyzer76k") {
    return()
  }

  scoreMatch <- BiocParallel::bplapply(scoreMatch, function(sc) {
    SpectraTools::CombineScore(sc, combineParam)
  })
  scoreMatch <- scoreMatch[!sapply(scoreMatch, is.null)]

  scTable <- do.call(rbind, lapply(scoreMatch, GenOutputScore))
  pkTable <- merge(expdata@info, scTable, by = 'row.names', all = TRUE)
  rownames(pkTable) <- pkTable$Row.names
  pkTable <- pkTable[, -1]
  write.csv(pkTable, file.path(experimentParam@resDir, "result_ScoreCombine.csv"),
            row.names = FALSE)

  if (applyRules) {
    rulename <- match.arg(rulename)
    rulefile <- system.file("rules", rulename, package = getPackageName())
    rules <- readRDS(rulefile)[[experimentParam@polarity]]
    scoreMatch <- BiocParallel::bplapply(scoreMatch, function(score) {
      SpectraTools::ApplyRules(score, rules)
    })

    dirSave <- file.path(experimentParam@tmpDir, "RuleRefinedCheck")
    OutputMatchResult(scoreMatch, expdata@info, dirSave)
    dirPlot <- file.path(experimentParam@resDir, "RuleRefinedPlot")
    PlotMatchResult(scoreMatch, expdata@info, dirPlot, addname = TRUE)
    ruleRefined <- do.call(rbind, lapply(scoreMatch, RefineRuleResult))
    pkTable <- merge(pkTable, ruleRefined, by = 'row.names', all = TRUE)
    rownames(pkTable) <- pkTable$Row.names
    pkTable <- pkTable[, -1]
    write.csv(pkTable, file.path(experimentParam@resDir, "result_RuleRefine.csv"))
  }
  cat("Congratulations! ALL WORK DONE!!\n")
}

PlotMatchResult <- function(scoreMatch, expinfo, dirPlot,
                            addname = FALSE, plotPNG = FALSE) {
  if (!dir.exists(dirPlot)) {
    dir.create(dirPlot)
  }

  lapply(names(scoreMatch), function(nm) {
    pkname <- expinfo[nm, "name"]
    matchScore <- scoreMatch[[nm]]
    if (!is.null(matchScore)) {
      pdf(file.path(dirPlot, paste0(pkname, ".pdf")), width = 8, height = 6)
      PlotMirror(matchScore, pkname, addname = addname)
      dev.off()
    }
  })
  invisible()
}

OutputMatchResult <- function(scoreMatch, expinfo, dirSave) {
  if (!dir.exists(dirSave)) {
    dir.create(dirSave)
  }
  lapply(names(scoreMatch), function(nm) {
    sc <- scoreMatch[[nm]]
    info <- sc@info
    frag <- lapply(sc@matchedFragments, function(frag) {
      frag[!is.na(frag$mz), , drop = FALSE]
    })
    dtCheck <- do.call(rbind, frag)
    dtCheck$lipname <- unlist(mapply(rep,
                                     times = sapply(frag, nrow),
                                     info$name,
                                     SIMPLIFY = FALSE))
    fnSave <- file.path(dirSave, paste0(expinfo[nm, "name"], ".csv"))
    write.csv(dtCheck, fnSave, row.names = FALSE)
  })
  invisible()
}

GetParamTable <- function(params) {
  params <- params[!sapply(params, is.null)]
  paramName <- names(params)
  do.call(rbind, lapply(paramName, function(nm) {
    param <- params[[nm]]
    nmSlots <- slotNames(param)
    valSlots <- unname(sapply(nmSlots, function(nmSlot) {
      val <- slot(param, nmSlot)
      paste(val, collapse = " ")
    }))
    data.frame("paramName" = nm, "parameter" = nmSlots, "value" = valSlots)
  }))
}
